{"version":3,"sources":["components/bechdelContainer.js","components/searchMoviesComponent.js","App.js","serviceWorker.js","index.js"],"names":["BechdelContainer","title","rating","useState","movieDb","setMovieDb","passed","setPassed","searchMoviesDb","a","process","urlTwo","encodeURI","fetch","res","json","data","console","log","results","error","useEffect","className","overview","src","poster_path","alt","SearchMovies","query","setQuery","moviesBechdel","setMoviesBechdel","searchMoviesBechdel","url","onSubmit","e","preventDefault","htmlFor","type","placeholder","name","value","onChange","target","map","movie","id","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"sQAEe,SAASA,EAAT,GAA4C,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,OAAS,EAExBC,mBAAS,IAFe,mBAE/CC,EAF+C,KAEtCC,EAFsC,OAG1BF,oBAAS,GAHiB,mBAG/CG,EAH+C,KAGvCC,EAHuC,KAKhDC,EAAc,uCAAG,gCAAAC,EAAA,4DAEHC,mCACVC,EAASC,UAAU,qDAAD,OADRF,mCACQ,iCAAsFT,EAAtF,gCAHL,kBAMGY,MAAMF,GANT,cAMTG,EANS,gBAOKA,EAAIC,OAPT,OAOTC,EAPS,OAQfC,QAAQC,IAAIF,EAAKG,QAAQ,IACzBd,EAAWW,EAAKG,QAAQ,IATT,kDAWfF,QAAQG,MAAR,MAXe,0DAAH,qDA6BpB,OALAC,qBAAW,WANHd,EADW,IAAXL,GASJM,MACD,CAACP,IAEKG,EACD,sBAAKkB,UAAU,OAAf,UACA,oBAAIA,UAAU,aAAd,SAA4BlB,EAAQH,QACpC,sBAAKqB,UAAU,eAAf,UACI,sBAAKA,UAAU,YAAf,UACI,qBAAKA,UAAU,OAAf,SAEIhB,EACA,mBAAGgB,UAAU,SAAb,oBACA,mBAAGA,UAAU,SAAb,sBAGJ,mBAAGA,UAAU,aAAb,SAA2BlB,EAAQmB,cAEvC,qBAAKD,UAAU,aACfE,IAAG,0DAAqDpB,EAAQqB,aAChEC,IAAKtB,EAAQH,MAAQ,eAGzB,4BAAG,qDAAwBC,UAE/B,KCrDO,SAASyB,IAAgB,IAAD,EAETxB,mBAAS,IAFA,mBAE5ByB,EAF4B,KAErBC,EAFqB,OAIO1B,mBAAS,IAJhB,mBAI5B2B,EAJ4B,KAIbC,EAJa,KAO7BC,EAAmB,uCAAG,gCAAAvB,EAAA,6DAElBwB,EAFkB,qGAEkFL,GAFlF,kBAKFf,MAAMoB,GALJ,cAKdnB,EALc,gBAMAA,EAAIC,OANJ,OAMdC,EANc,OAOpBC,QAAQC,IAAIF,GACZe,EAAiBf,GARG,kDAUpBC,QAAQG,MAAR,MAVoB,0DAAH,qDAmBzB,OACI,qCACI,uBAAME,UAAU,OAAOY,SAPV,SAACC,GAClBA,EAAEC,iBACFJ,KAKI,UACI,uBAAOK,QAAQ,QAAQf,UAAU,QAAjC,mBACA,uBAAOA,UAAU,QAAQgB,KAAK,OAAOC,YAAY,oBAAoBC,KAAK,QAC1EC,MAAOb,EAAOc,SAAU,SAACP,GAAD,OAAON,EAASM,EAAEQ,OAAOF,UACjD,wBAAQnB,UAAU,SAASgB,KAAK,SAAhC,uBAEJ,qBAAKhB,UAAU,YAAf,SACKQ,EAAcc,KAAI,SAAAC,GAAK,OACrB,cAAC7C,EAAD,CAAkBC,MAAO4C,EAAM5C,MAAOC,OAAQ2C,EAAM3C,QAAa2C,EAAMC,SAG9E,qBAAKxB,UAAU,iB,ICzBZyB,E,uKAVX,OACE,sBAAKzB,UAAU,YAAf,UACI,oBAAIA,UAAU,QAAd,kCACA,qBAAKA,UAAU,MAAME,IAAI,0BAA0BE,IAAI,KACvD,cAACC,EAAD,W,GANQqB,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA7C,GACLH,QAAQG,MAAMA,EAAM8C,c","file":"static/js/main.55571419.chunk.js","sourcesContent":["import React, { useEffect, useState} from 'react';\r\n\r\nexport default function BechdelContainer({title, rating}) {\r\n\r\n    const [movieDb, setMovieDb] = useState([]);\r\n    const [passed, setPassed] = useState(false);\r\n\r\n    const searchMoviesDb = async () => {\r\n\r\n        const api_key = process.env.REACT_APP_API_KEY;\r\n        const urlTwo = encodeURI(`https://api.themoviedb.org/3/search/movie?api_key=${api_key}&language=en-US&query=${title}&page=1&include_adult=false`);\r\n        \r\n        try {\r\n            const res = await fetch(urlTwo);\r\n            const data  = await res.json();\r\n            console.log(data.results[0]);           \r\n            setMovieDb(data.results[0]);\r\n        }catch(err){\r\n            console.error(err);\r\n           \r\n        }\r\n    }\r\n\r\n    const test = () => {\r\n        if (rating === 3) {\r\n            setPassed(true);\r\n        } else {\r\n            setPassed(false);\r\n        }\r\n    };\r\n\r\n    useEffect( () => {\r\n        test();\r\n        searchMoviesDb();\r\n    }, [title]);      \r\n\r\n    return !!movieDb?\r\n            <div className=\"card\" >\r\n            <h3 className=\"card-title\">{movieDb.title}</h3>\r\n            <div className=\"card-content\">\r\n                <div className='card-info'>\r\n                    <div className='test'>\r\n                        {\r\n                        passed ? \r\n                        <p className='passed'>Passed</p> : \r\n                        <p className='failed'>Failed</p>\r\n                        }\r\n                    </div>\r\n                    <p className=\"card--desc\">{movieDb.overview}</p>\r\n                </div>\r\n                <img className=\"card-image\"\r\n                src={`https://image.tmdb.org/t/p/w185_and_h278_bestv2/${movieDb.poster_path}`}\r\n                alt={movieDb.title + ' poster'}\r\n                />\r\n            </div>\r\n            <p><small>Bechdel Rating: {rating}</small></p>\r\n        </div> :\r\n        null\r\n};\r\n","import React, {useState} from 'react';\r\nimport BechdelContainer from './bechdelContainer';\r\n\r\n\r\nexport default function SearchMovies() {\r\n    \r\n    const [query, setQuery] = useState('');\r\n\r\n    const [moviesBechdel, setMoviesBechdel] = useState([]);\r\n\r\n\r\n    const searchMoviesBechdel = async () => {\r\n\r\n        const url = `https://thingproxy.freeboard.io/fetch/http://bechdeltest.com/api/v1/getMoviesByTitle?title=${query}`;\r\n\r\n        try {\r\n            const res = await fetch(url);\r\n            const data  = await res.json();\r\n            console.log(data);\r\n            setMoviesBechdel(data);\r\n        }catch(err){\r\n            console.error(err);\r\n        }\r\n    };\r\n\r\n    const searchMovies = (e) =>{\r\n        e.preventDefault();\r\n        searchMoviesBechdel();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <form className='form' onSubmit={searchMovies}>\r\n                <label htmlFor='query' className='label'>Movie</label>\r\n                <input className='input' type='text' placeholder='i.e. Mary Poppins' name='query' \r\n                value={query} onChange={(e) => setQuery(e.target.value)} />\r\n                <button className='button' type='submit'>Submit</button>\r\n            </form>\r\n            <div className=\"card-list\">\r\n                {moviesBechdel.map(movie =>\r\n                   <BechdelContainer title={movie.title} rating={movie.rating} key={movie.id} />\r\n                )}\r\n            </div>\r\n            <div className=\"card-list\">\r\n            </div>\r\n        </>\r\n    )\r\n};\r\n","import React, { Component} from 'react';\r\nimport './App.css';\r\nimport SearchMovies from './components/searchMoviesComponent';\r\n\r\n\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n          <h1 className=\"title\">FEMINIST FILM FINDER</h1>\r\n          <img className='img' src='images/comic895x389.jpg' alt='' />\r\n          <SearchMovies />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n \r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}